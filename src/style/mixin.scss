$activeColor: #FFFF00;
$bdColor: #00C0FF;

// 背景图片地址和大小
@mixin bis($url) {
    background-image: url($url);
    background-repeat: no-repeat;
    background-size: 100% 100%;
}

@mixin borderBox($box: border-box) {
    -webkit-box-sizing: $box;
    -moz-box-sizing: $box;
    box-sizing: $box;
}

//定位全屏
@mixin allcover {
    position: absolute;
    top: 0;
    right: 0;
}

//定位上下左右居中
@mixin center {
    position: absolute;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

//定位上下居中
@mixin ct {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    transform: translateY(-50%);
}

//定位上下居中
@mixin cl {
    position: absolute;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
}

//宽高
@mixin wh($width, $height) {
    width: $width;
    height: $height;
}

//字体大小、行高、字体
@mixin font($size, $line-height, $family: 'Microsoft YaHei') {
    font: #{$size}/#{$line-height} $family;
}

//字体大小，颜色
@mixin sc($size, $color) {
    font-size: $size;
    color: $color;
}

//flex 布局和 子元素 对其方式
@mixin fj($type: space-between) {
    display: flex;
    justify-content: $type;

}

//flex布局,默认居中
@mixin defaultFlex() {
    display: flex;
    justify-content: center;
    align-items: center;
}

// 计算rem并返回,这里1rem=20px
@function calculateRem($size: 20) {
    $remSize: $size / 20px;
    @return $remSize * 1rem;
}

// 用rem设置字体大小,如浏览器不支持rem就会fallback用第一行的px
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

//例子
//.foo {
//  @include when-inside('.active') {
//    animation: fadeIn 0.3s 1s forwards;
//  }
//}

// 页面高度1080  $value: 设计图高度
@function vh( $value ) {
    @return ( $value / (1080) * 100 ) + vh;
}